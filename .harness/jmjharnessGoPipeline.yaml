pipeline:
  name: jmjharnessGoPipeline
  identifier: jmjharnessGoPipeline
  projectIdentifier: harness101JJ
  orgIdentifier: harnesscandidateslab
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: Github_Connector
        build: <+input>
  stages:
    - stage:
        name: Build Test and Push
        identifier: Build_Test_and_Push
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: cidelegate
              namespace: harness-delegate-ng
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Run
                  name: Run Unit Tests
                  identifier: Run_Unit_Tests
                  spec:
                    connectorRef: jmjDockerReg
                    image: golang:1.15
                    shell: Sh
                    command: |-
                      go get gotest.tools/gotestsum
                      gotestsum --format=standard-verbose --junitfile unit-tests.xml || true
                      CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -tags netgo
              - step:
                  type: BuildAndPushDockerRegistry
                  name: Build and push image to Docker Registry
                  identifier: Build_and_push_image_to_Docker_Registry
                  spec:
                    connectorRef: jmjDockerReg
                    repo: jjablonski94/helloworldservergo
                    tags:
                      - <+pipeline.sequenceId>
                      - <+pipeline.stages.Build_Test_and_Push.variables.inputSha>
              - step:
                  type: Run
                  name: Create Github Release
                  identifier: Create_Github_Release
                  spec:
                    connectorRef: jmjDockerReg
                    image: docker.io/jjablonski94/helloworldservergo
                    shell: Bash
                    command: |-
                      apt-get update
                      apt-get install curl -y
                      curl -L \
                        -X POST \
                        -H "Accept: application/vnd.github+json" \
                        -H "jonathan-jablonski: $bearer"\
                        -H "X-GitHub-Api-Version: 2022-11-28" \
                        https://api.github.com/repos/jonathan-jablonski/goHelloWorldServer/releases \
                        -d '{"tag_name":"cd-lab","target_commitish":"main","name":"v1.0.0","body":"Description of the release","draft":false,"prerelease":false,"generate_release_notes":false}'
                    envVariables:
                      bearer: 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
        variables:
          - name: commitSha
            type: String
            description: ""
            value: <+pipeline.variables.webhookPayload.substring(0,5)>
          - name: inputSha
            type: String
            description: ""
            value: <+pipeline.variables.gitCommitSha.substring(0,5)>
    - stage:
        name: Run Integration Test
        identifier: Run_Integration_Test
        description: ""
        type: CI
        spec:
          cloneCodebase: false
          infrastructure:
            useFromStage: Build_Test_and_Push
          execution:
            steps:
              - step:
                  type: Background
                  name: Docker Hub BS
                  identifier: Docker_Hub_BS
                  spec:
                    connectorRef: jmjDockerReg
                    image: jjablonski94/helloworldservergo:<+pipeline.sequenceId>
                    shell: Sh
              - step:
                  type: Run
                  name: Test Server Connection
                  identifier: Test_Server_Connection
                  spec:
                    connectorRef: jmjDockerReg
                    image: curlimages/curl:7.73.0
                    shell: Sh
                    command: |-
                      sleep 10
                      curl localhost:8080
                      curl localhost:8080?Hello!_I_am_a_nice_demo!
    - stage:
        name: Deploy Service
        identifier: Deploy_Service
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: nginx
          environment:
            environmentRef: dev_1680895551287
            deployToAll: false
            infrastructureDefinitions:
              - identifier: devcluster_1680895551287
          execution:
            steps:
              - step:
                  name: Rollout Deployment
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
                    delegateSelectors:
                      - kubernetes-delegate-jj
                  failureStrategies: []
              - step:
                  type: Http
                  name: HTTP Test
                  identifier: HTTP_Test
                  spec:
                    url: https://www.google.com/healthcheck.html
                    method: GET
                    headers: []
                    outputVariables: []
                    assertion: <+httpResponseCode>
                    delegateSelectors:
                      - kubernetes-delegate-jj
                  timeout: 1m
                  failureStrategies: []
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
  variables:
    - name: webhookPayload
      type: String
      description: ""
      value: <+trigger.commitSha>
