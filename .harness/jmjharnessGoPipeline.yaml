pipeline:
  name: jmjharnessGoPipeline
  identifier: jmjharnessGoPipeline
  projectIdentifier: harness101JJ
  orgIdentifier: harnesscandidateslab
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: Github_Connector
        build: <+input>
  stages:
    - stage:
        name: Build Test and Push
        identifier: Build_Test_and_Push
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: cidelegate
              namespace: harness-delegate-ng
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Run
                  name: Run Unit Tests
                  identifier: Run_Unit_Tests
                  spec:
                    connectorRef: jmjDockerReg
                    image: golang:1.15
                    shell: Sh
                    command: |-
                      go get gotest.tools/gotestsum
                      gotestsum --format=standard-verbose --junitfile unit-tests.xml || true
                      CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -tags netgo
              - step:
                  type: BuildAndPushDockerRegistry
                  name: Build and push image to Docker Registry
                  identifier: Build_and_push_image_to_Docker_Registry
                  spec:
                    connectorRef: jmjDockerReg
                    repo: jjablonski94/helloworldservergo
                    tags:
                      - <+pipeline.sequenceId>
        variables:
          - name: commitSha
            type: String
            description: ""
            value: <+pipeline.variables.webhookPayload.substring(0,5)>
          - name: inputSha
            type: String
            description: ""
            value: <+pipeline.variables.gitCommitSha.substring(0,5)>
    - stage:
        name: Run Integration Test
        identifier: Run_Integration_Test
        description: ""
        type: CI
        spec:
          cloneCodebase: false
          infrastructure:
            useFromStage: Build_Test_and_Push
          execution:
            steps:
              - step:
                  type: Background
                  name: Docker Hub BS
                  identifier: Docker_Hub_BS
                  spec:
                    connectorRef: jmjDockerReg
                    image: jjablonski94/helloworldservergo:<+pipeline.sequenceId>
                    shell: Sh
              - step:
                  type: Run
                  name: Test Server Connection
                  identifier: Test_Server_Connection
                  spec:
                    connectorRef: jmjDockerReg
                    image: curlimages/curl:7.73.0
                    shell: Sh
                    command: |-
                      sleep 10
                      curl localhost:8080
                      curl localhost:8080?Hello!_I_am_a_nice_demo!
  variables:
    - name: webhookPayload
      type: String
      description: ""
      value: <+trigger.commitSha>
    - name: gitCommitSha
      type: String
      description: ""
      value: <+input>
